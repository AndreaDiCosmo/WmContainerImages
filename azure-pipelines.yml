# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: WmDevOpsAgentPool
  vmImage: Canonical:0001-com-ubuntu-confidential-vm-focal:20_04-lts-gen2:latest

steps:
# grant execution permssions
- script: chmod u+x ${BUILD_SOURCESDIRECTORY}/scripts/*.sh
  displayName: "Grant shell execution permissions"

# get SUIF
- script: ${BUILD_SOURCESDIRECTORY}/scripts/getSUIF.sh
  displayName: 'Get SUIF'

# update ubuntu machine
- script: ${BUILD_SOURCESDIRECTORY}/scripts/prepareMachine.sh
  displayName: 'System software preparation'

# get SA share secrets
- task: DownloadSecureFile@1
  name: SASecureInfo
  displayName: 'Download secure information for images share'
  inputs:
    secureFile: 'SA.secrets.sh'

# mount SA share
- script: ${BUILD_SOURCESDIRECTORY}/scripts/mountImagesShare.sh
  displayName: 'Mount images share'

# check share
- script: |
    echo "Contenst of the share"
    . ${BUILD_SOURCESDIRECTORY}/scripts/setEnv.sh
    ls -lrt $MY_sd
  displayName: 'Check Share'

# Assure binary installatiom files
- script: ${BUILD_SOURCESDIRECTORY}/scripts/assureInstallBinaries.sh 
  displayName: 'Get installation binaries'

# Assure image files
- script: ${BUILD_SOURCESDIRECTORY}/scripts/assureProductImages.sh 
  displayName: 'Get product images'

# MSR license is required at build time
- task: DownloadSecureFile@1
  name: msrLicense
  displayName: 'Download MSR license'
  inputs:
    secureFile: 'msr-license.xml'

# Install MSR
- script: ${BUILD_SOURCESDIRECTORY}/scripts/installLeanMSR.sh
  displayName: 'Install MSR'

# Containerize Canonical
- script: ${BUILD_SOURCESDIRECTORY}/scripts/containerizeCanonicalMSR.sh
  displayName: 'Containerize Canonical MSR'

# Service Principal Credentials
- task: DownloadSecureFile@1
  name: SPCredentials
  displayName: 'Download SP credentials'
  inputs:
    secureFile: 'sp.credentials.sh'

# push the image
- script: ${BUILD_SOURCESDIRECTORY}/scripts/pushMSRImages.sh
  displayName: 'Push built image(s)'

# Save audit on share 
# HINT: ou should use this step only for debug purposes
# HINT: without this step the mount may be readonly
- script: ${BUILD_SOURCESDIRECTORY}/scripts/saveAudit.sh
  displayName: 'Save Audit on Share'
  condition: always()

# umount SA share
- script: ${BUILD_SOURCESDIRECTORY}/scripts/unmountShare.sh
  displayName: 'Unmount images share'
  condition: always()